/**
 * ุฃุฏูุงุช ุชูุธูู ุงูููุฏ ูุฅุฒุงูุฉ TODO items
 */

interface TodoItem {
  file: string;
  line: number;
  type: 'TODO' | 'FIXME' | 'HACK' | 'XXX';
  description: string;
  priority: 'low' | 'medium' | 'high';
}

interface CodeIssue {
  file: string;
  line: number;
  type: 'console.log' | 'console.warn' | 'console.error' | 'hardcoded-password' | 'security-issue';
  description: string;
  severity: 'info' | 'warning' | 'error' | 'critical';
}

class CodeCleanupManager {
  private todos: TodoItem[] = [];
  private issues: CodeIssue[] = [];

  /**
   * ุชุชุจุน TODO items ูู ุงูููุฏ
   */
  trackTodo(file: string, line: number, type: TodoItem['type'], description: string) {
    const priority = this.determinePriority(type, description);
    
    this.todos.push({
      file,
      line,
      type,
      description,
      priority
    });
  }

  /**
   * ุชุชุจุน ูุดุงูู ุงูููุฏ
   */
  trackIssue(file: string, line: number, type: CodeIssue['type'], description: string) {
    const severity = this.determineSeverity(type);
    
    this.issues.push({
      file,
      line,
      type,
      description,
      severity
    });
  }

  /**
   * ุชุญุฏูุฏ ุฃููููุฉ ุงููููุฉ
   */
  private determinePriority(type: TodoItem['type'], description: string): TodoItem['priority'] {
    if (type === 'FIXME' || type === 'XXX') return 'high';
    if (type === 'HACK') return 'medium';
    if (description.toLowerCase().includes('security') || 
        description.toLowerCase().includes('password') ||
        description.toLowerCase().includes('auth')) return 'high';
    return 'low';
  }

  /**
   * ุชุญุฏูุฏ ุดุฏุฉ ุงููุดููุฉ
   */
  private determineSeverity(type: CodeIssue['type']): CodeIssue['severity'] {
    switch (type) {
      case 'hardcoded-password':
      case 'security-issue':
        return 'critical';
      case 'console.error':
        return 'error';
      case 'console.warn':
        return 'warning';
      case 'console.log':
        return 'info';
      default:
        return 'info';
    }
  }

  /**
   * ุงูุญุตูู ุนูู ุชูุฑูุฑ ุดุงูู
   */
  getCleanupReport() {
    const todosByPriority = this.groupBy(this.todos, 'priority');
    const issuesBySeverity = this.groupBy(this.issues, 'severity');

    return {
      summary: {
        totalTodos: this.todos.length,
        totalIssues: this.issues.length,
        highPriorityTodos: todosByPriority.high?.length || 0,
        criticalIssues: issuesBySeverity.critical?.length || 0
      },
      todos: {
        all: this.todos,
        byPriority: todosByPriority
      },
      issues: {
        all: this.issues,
        bySeverity: issuesBySeverity
      },
      recommendations: this.generateRecommendations()
    };
  }

  /**
   * ุชูููุฏ ุชูุตูุงุช ุงูุชูุธูู
   */
  private generateRecommendations(): string[] {
    const recommendations: string[] = [];

    // ุงูุชุญูู ูู ุงููุดุงูู ุงูุญุฑุฌุฉ
    const criticalIssues = this.issues.filter(i => i.severity === 'critical');
    if (criticalIssues.length > 0) {
      recommendations.push(`๐จ ุฅุตูุงุญ ููุฑู: ููุฌุฏ ${criticalIssues.length} ูุดููุฉ ุฃูููุฉ ุญุฑุฌุฉ`);
    }

    // ุงูุชุญูู ูู console.log
    const consoleIssues = this.issues.filter(i => i.type === 'console.log');
    if (consoleIssues.length > 50) {
      recommendations.push(`๐งน ุชูุธูู: ุฅุฒุงูุฉ ${consoleIssues.length} ุงุณุชุฏุนุงุก console.log`);
    }

    // ุงูุชุญูู ูู TODO items
    const highPriorityTodos = this.todos.filter(t => t.priority === 'high');
    if (highPriorityTodos.length > 5) {
      recommendations.push(`โก ุฅููุงู: ${highPriorityTodos.length} ููุงู ุนุงููุฉ ุงูุฃููููุฉ`);
    }

    // ุชูุตูุงุช ุนุงูุฉ
    if (this.todos.length > 20) {
      recommendations.push('๐ ุฅูุดุงุก ุฎุทุฉ ุนูู ูุฅููุงู ุงูููุงู ุงููุคุฌูุฉ');
    }

    if (this.issues.length > 100) {
      recommendations.push('๐ง ุชุญุณูู ูุธุงู CI/CD ูุงูุชุดุงู ุงููุดุงูู ูุจูุฑุงู');
    }

    return recommendations;
  }

  /**
   * ุชุฌููุน ุงูุนูุงุตุฑ ุญุณุจ ุฎุงุตูุฉ ูุนููุฉ
   */
  private groupBy<T, K extends keyof T>(array: T[], key: K): Record<string, T[]> {
    return array.reduce((groups, item) => {
      const group = String(item[key]);
      groups[group] = groups[group] || [];
      groups[group].push(item);
      return groups;
    }, {} as Record<string, T[]>);
  }

  /**
   * ูุณุญ ุฌููุน ุงูุจูุงูุงุช
   */
  clear() {
    this.todos = [];
    this.issues = [];
  }

  /**
   * ุชุตุฏูุฑ ุงูุจูุงูุงุช ูููุฑุงุฌุนุฉ
   */
  exportData() {
    return {
      todos: this.todos,
      issues: this.issues,
      report: this.getCleanupReport(),
      exportedAt: new Date().toISOString()
    };
  }
}

// ุฅูุดุงุก ูุฏูุฑ ูุงุญุฏ ููุชุทุจูู
export const codeCleanup = new CodeCleanupManager();

// ุฏูุงู ูุณุงุนุฏุฉ ููุงุณุชุฎุฏุงู ุงูุณุฑูุน
export const trackTodo = (file: string, line: number, type: TodoItem['type'], description: string) =>
  codeCleanup.trackTodo(file, line, type, description);

export const trackCodeIssue = (file: string, line: number, type: CodeIssue['type'], description: string) =>
  codeCleanup.trackIssue(file, line, type, description);

// ุชุญุฏูุฏ ุงููุดุงูู ุงูุดุงุฆุนุฉ ูู ุงูุชุทููุฑ
export const COMMON_ISSUES = {
  CONSOLE_LOG_IN_PRODUCTION: 'ุงุณุชุฎุฏุงู console.log ูู ุงูุฅูุชุงุฌ ูุคุซุฑ ุนูู ุงูุฃุฏุงุก',
  HARDCODED_CREDENTIALS: 'ูููุงุช ุงููุฑูุฑ ุงููุฏูุฌุฉ ูู ุงูููุฏ ุชุดูู ุฎุทุฑุงู ุฃูููุงู',
  MISSING_ERROR_HANDLING: 'ุนุฏู ูุฌูุฏ ูุนุงูุฌุฉ ููุงุณุจุฉ ููุฃุฎุทุงุก',
  LARGE_FILE_SIZE: 'ุญุฌู ุงูููู ูุจูุฑ ุฌุฏุงู ููุญุชุงุฌ ุชูุณูู',
  DUPLICATE_CODE: 'ุชูุฑุงุฑ ูู ุงูููุฏ ูููู ุชุญุณููู',
  PERFORMANCE_ISSUE: 'ูุดููุฉ ูู ุงูุฃุฏุงุก ูุฏ ุชุคุซุฑ ุนูู ุชุฌุฑุจุฉ ุงููุณุชุฎุฏู'
} as const;